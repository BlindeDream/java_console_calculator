Index: src/com/company/Calculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.company;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Deque;\r\nimport java.util.Scanner;\r\nimport java.lang.Math;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Calculator {\r\n    private DataSet data;\r\n    private SingleDataSet singleData;\r\n    private Scanner scanner;\r\n    private boolean isSingleDataSet;\r\n\r\n    public Calculator(Scanner scan, boolean isSingle){\r\n        scanner = scan;\r\n        isSingleDataSet = isSingle;\r\n        if (isSingleDataSet){\r\n            singleData = new SingleDataSet(scanner);\r\n            data = null;\r\n        } else {\r\n            data = new DataSet(scanner);\r\n            singleData = null;\r\n        }\r\n    }\r\n\r\n    public Calculator(DataSet newData){\r\n        scanner = newData.getScanner();\r\n        data = newData;\r\n    }\r\n\r\n    public Calculator() {\r\n\r\n    }\r\n\r\n\r\n    public double newCalculation(){\r\n        System.out.println(\"Неверная операция. Повторите ввод. \");\r\n        if (isSingleDataSet){\r\n            singleData = new SingleDataSet(scanner);\r\n        } else {\r\n            data = new DataSet(scanner);\r\n        }\r\n        return calculate();\r\n    }\r\n\r\n    public double calculate(){\r\n        if (isSingleDataSet && singleData.isOperationWrong() || !isSingleDataSet && data.isOperationWrong()){\r\n            return newCalculation();\r\n        } else {\r\n            if (isSingleDataSet){\r\n                double num1 = singleData.getNum1();\r\n                switch(singleData.getOperation()){\r\n                    case('1'): // sin\r\n                        return Math.sin(num1);\r\n                    case('2'): // cos\r\n                        return Math.cos(num1);\r\n                    case('3'): // sqrt\r\n                        return Math.log10(num1);\r\n                    case('4'): // sqrt\r\n                        return Math.sin(Math.toRadians(num1));\r\n                    case('5'): // sqrt\r\n                        return Math.cos(Math.toRadians(num1));\r\n                    default:\r\n                        return newCalculation();\r\n                }\r\n\r\n            } else {\r\n                double num1 = data.getNum1();\r\n                double num2 = data.getNum2();\r\n                switch(data.getOperation()){\r\n                    case('+'):\r\n                        return num1+num2;\r\n                    case('-'):\r\n                        return num1-num2;\r\n                    case('*'):\r\n                        return num1*num2;\r\n                    case('/'):\r\n                        return num1/num2;\r\n\r\n                    default:\r\n                        return newCalculation();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public void roundcalc() {//в RoundedCalculator мы вводим действие,затем кол-во цифр после запятой и, сначала, считаем результат,\r\n\r\n        BufferedReader d = new BufferedReader(new InputStreamReader(System.in));\r\n        String sIn;\r\n\r\n        try {\r\n            System.out.println(\"Введте выражение для расчета. Поддерживаются цифры, операции +,-,*,/ и приоритеты в виде скобок ( и ):\");\r\n            sIn = d.readLine();\r\n            sIn = opn(sIn);\r\n            System.out.println(calculate(sIn));\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Преобразовать строку в обратную польскую нотацию\r\n     *\r\n     * @param sIn Входная строка\r\n     * @return Выходная строка в обратной польской нотации\r\n     */\r\n    private static String opn(String sIn) throws Exception {\r\n        StringBuilder sbStack = new StringBuilder(\"\"), sbOut = new StringBuilder(\"\");\r\n\r\n        char cIn, cTmp;\r\n\r\n        for (int i = 0; i < sIn.length(); i++) {\r\n            cIn = sIn.charAt(i);\r\n            if (isOp(cIn)) {\r\n                while (sbStack.length() > 0) {\r\n                    cTmp = sbStack.substring(sbStack.length() - 1).charAt(0);\r\n                    if (isOp(cTmp) && (opPrior(cIn) <= opPrior(cTmp))) {\r\n                        sbOut.append(\" \").append(cTmp).append(\" \");\r\n                        sbStack.setLength(sbStack.length() - 1);\r\n                    } else {\r\n                        sbOut.append(\" \");\r\n                        break;\r\n                    }\r\n                }\r\n                sbOut.append(\" \");\r\n                sbStack.append(cIn);\r\n            } else if ('(' == cIn) {\r\n                sbStack.append(cIn);\r\n            } else if (')' == cIn) {\r\n                cTmp = sbStack.substring(sbStack.length() - 1).charAt(0);\r\n                while ('(' != cTmp) {\r\n                    if (sbStack.length() < 1) {\r\n                        throw new Exception(\"Ошибка разбора скобок. Проверьте правильность выражения.\");\r\n                    }\r\n                    sbOut.append(\" \").append(cTmp);\r\n                    sbStack.setLength(sbStack.length() - 1);\r\n                    cTmp = sbStack.substring(sbStack.length() - 1).charAt(0);\r\n                }\r\n                sbStack.setLength(sbStack.length() - 1);\r\n            } else {\r\n                // Если символ не оператор - добавляем в выходную последовательность\r\n                sbOut.append(cIn);\r\n            }\r\n        }\r\n\r\n        // Если в стеке остались операторы, добавляем их в входную строку\r\n        while (sbStack.length() > 0) {\r\n            sbOut.append(\" \").append(sbStack.substring(sbStack.length() - 1));\r\n            sbStack.setLength(sbStack.length() - 1);\r\n        }\r\n\r\n        return sbOut.toString();\r\n    }\r\n\r\n    /**\r\n     * Функция проверяет, является ли текущий символ оператором\r\n     */\r\n    private static boolean isOp(char c) {\r\n        switch (c) {\r\n            case '-':\r\n            case '+':\r\n            case '*':\r\n            case '/':\r\n\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Возвращает приоритет операции\r\n     *\r\n     * @param op char\r\n     * @return byte\r\n     */\r\n    private static byte opPrior(char op) {\r\n        switch (op) {\r\n            case '*':\r\n            case '/':\r\n                return 2;\r\n        }\r\n        return 1; // Тут остается + и -\r\n    }\r\n\r\n    /**\r\n     * Считает выражение, записанное в обратной польской нотации\r\n     *\r\n     * @param sIn\r\n     * @return double result\r\n     */\r\n    private static double calculate(String sIn) throws Exception {\r\n        double dA = 0, dB = 0;\r\n        String sTmp;\r\n        Deque<Double> stack = new ArrayDeque<Double>();\r\n        StringTokenizer st = new StringTokenizer(sIn);\r\n        while (st.hasMoreTokens()) {\r\n            try {\r\n                sTmp = st.nextToken().trim();\r\n                if (1 == sTmp.length() && isOp(sTmp.charAt(0))) {\r\n                    if (stack.size() < 2) {\r\n                        throw new Exception(\"Неверное количество данных в стеке для операции \" + sTmp);\r\n                    }\r\n                    dB = stack.pop();\r\n                    dA = stack.pop();\r\n                    switch (sTmp.charAt(0)) {\r\n                        case '+':\r\n                            dA += dB;\r\n                            break;\r\n                        case '-':\r\n                            dA -= dB;\r\n                            break;\r\n                        case '/':\r\n                            dA /= dB;\r\n                            break;\r\n                        case '*':\r\n                            dA *= dB;\r\n                            break;\r\n\r\n\r\n                        default:\r\n                            throw new Exception(\"Недопустимая операция \" + sTmp);\r\n                    }\r\n                    stack.push(dA);\r\n                } else {\r\n                    dA = Double.parseDouble(sTmp);\r\n                    stack.push(dA);\r\n                }\r\n            } catch (Exception e) {\r\n                throw new Exception(\"Недопустимый символ в выражении\");\r\n            }\r\n        }\r\n\r\n        if (stack.size() > 1) {\r\n            throw new Exception(\"Количество операторов не соответствует количеству операндов\");\r\n        }\r\n\r\n        return stack.pop();\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Calculator.java b/src/com/company/Calculator.java
--- a/src/com/company/Calculator.java	(revision 2dc1146769f28af8d37256a441c2964f36c16170)
+++ b/src/com/company/Calculator.java	(date 1609313542849)
@@ -53,15 +53,15 @@
             if (isSingleDataSet){
                 double num1 = singleData.getNum1();
                 switch(singleData.getOperation()){
-                    case('1'): // sin
+                    case('1'):
                         return Math.sin(num1);
-                    case('2'): // cos
+                    case('2'):
                         return Math.cos(num1);
-                    case('3'): // sqrt
+                    case('3'):
                         return Math.log10(num1);
-                    case('4'): // sqrt
+                    case('4'):
                         return Math.sin(Math.toRadians(num1));
-                    case('5'): // sqrt
+                    case('5'):
                         return Math.cos(Math.toRadians(num1));
                     default:
                         return newCalculation();
Index: src/com/company/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.company;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Main{\r\n    public static void printResult(Calculator calculator, Scanner scan){\r\n        System.out.print(\"Результат: \");\r\n        System.out.println(calculator.calculate());\r\n    }\r\n\r\n    public static Calculator menu(Scanner scan){\r\n        System.out.println(\"Доступны следующие операции:\");\r\n        System.out.println(\"1) sin,cos,log\");\r\n        System.out.println(\"2) simple calculator\");\r\n        System.out.println(\"3) rounded calculator\");\r\n        System.out.print(\"Выберите тип операции: \");\r\n        int choise = scan.nextInt();\r\n        Calculator calc;\r\n        System.out.println();\r\n        switch (choise){\r\n            case (1):\r\n                System.out.println(\"Доступны следующие операции:\");\r\n                System.out.println(\"1) sin\");\r\n                System.out.println(\"2) cos \");\r\n                System.out.println(\"3) log\");\r\n                System.out.println(\"4) sin to Degrees\");\r\n                System.out.println(\"5) cos to Degrees\");\r\n                calc = new Calculator(scan, true); //isSingle == true\r\n                return calc;\r\n\r\n            case (2):\r\n                System.out.println(\"Доступны следующие операции:\");\r\n                System.out.println(\" + (сложение)\");\r\n                System.out.println(\" - (вычитание)\");\r\n                System.out.println(\" * (умножение)\");\r\n                System.out.println(\" / (деление)\");\r\n\r\n\r\n                calc = new Calculator(scan, false); //isSingle == false\r\n                return calc;\r\n\r\n            case (3): {\r\n                System.out.println(\"\\nRoundedCalculator\");//при втором пункте меню выводится калькулятор,который задает кол-во цифр после запятой и округляет результат\r\n                Calculator r_calculator = new Calculator();//обьявляем обьект второго калькулятора\r\n                r_calculator.roundcalc();\r\n\r\n                calc = new Calculator(scan, false); //isSingle == false\r\n                return calc;\r\n            }\r\n            default:\r\n                System.out.println(\"Некорректный ввод. Повторите ещё раз: \");\r\n                return menu(scan);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        Calculator calculator = menu(scan);\r\n        printResult(calculator, scan);\r\n\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Main.java b/src/com/company/Main.java
--- a/src/com/company/Main.java	(revision 2dc1146769f28af8d37256a441c2964f36c16170)
+++ b/src/com/company/Main.java	(date 1609313828840)
@@ -1,54 +1,60 @@
 package com.company;
 
+import com.sun.deploy.net.MessageHeader;
+
+import java.util.ArrayList;
+import java.util.Scanner;
 import java.util.Scanner;
 
-public class Main{
-    public static void printResult(Calculator calculator, Scanner scan){
+public class Main {
+
+    public static ArrayList<Double> list = new ArrayList<Double>();
+
+    public static void printResult(Calculator calculator, Scanner scan) {
         System.out.print("Результат: ");
-        System.out.println(calculator.calculate());
+        System.out.println((calculator.calculate()));
     }
 
-    public static Calculator menu(Scanner scan){
+    public static Calculator menu(Scanner scan) {
         System.out.println("Доступны следующие операции:");
-        System.out.println("1) sin,cos,log");
+        System.out.println("1) sin,cos");
         System.out.println("2) simple calculator");
-        System.out.println("3) rounded calculator");
+        System.out.println("3) rounded calculator ");
         System.out.print("Выберите тип операции: ");
         int choise = scan.nextInt();
         Calculator calc;
         System.out.println();
-        switch (choise){
+        switch (choise) {
             case (1):
-                System.out.println("Доступны следующие операции:");
-                System.out.println("1) sin");
-                System.out.println("2) cos ");
-                System.out.println("3) log");
-                System.out.println("4) sin to Degrees");
-                System.out.println("5) cos to Degrees");
+
+                System.out.println("1) sin ");
+                System.out.println("2) sin to Radians");
+                System.out.println("1) cos");
+                System.out.println("2) cos to Radians");
+
                 calc = new Calculator(scan, true); //isSingle == true
                 return calc;
 
             case (2):
-                System.out.println("Доступны следующие операции:");
-                System.out.println(" + (сложение)");
-                System.out.println(" - (вычитание)");
-                System.out.println(" * (умножение)");
-                System.out.println(" / (деление)");
+
+                System.out.println(" + ");
+                System.out.println(" - ");
+                System.out.println(" * ");
+                System.out.println(" / ");
 
 
                 calc = new Calculator(scan, false); //isSingle == false
                 return calc;
 
-            case (3): {
+            case 3: {
                 System.out.println("\nRoundedCalculator");//при втором пункте меню выводится калькулятор,который задает кол-во цифр после запятой и округляет результат
                 Calculator r_calculator = new Calculator();//обьявляем обьект второго калькулятора
                 r_calculator.roundcalc();
+            }//также и метод round,который задает кол-во цифр после запятой,а затем округляет результат
 
-                calc = new Calculator(scan, false); //isSingle == false
-                return calc;
-            }
+
             default:
-                System.out.println("Некорректный ввод. Повторите ещё раз: ");
+
                 return menu(scan);
         }
     }
@@ -61,4 +67,3 @@
     }
 }
 
-
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"19986b7f-423d-4f3a-a973-6f40d30c66b1\" name=\"Default Changelist\" comment=\"commit\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileEditorManager\">\r\n    <leaf>\r\n      <file leaf-file-name=\"Main.java\" pinned=\"false\" current=\"true\" current-in-tab=\"true\">\r\n        <entry file=\"file://$PROJECT_DIR$/src/com/company/Main.java\">\r\n          <provider selected=\"true\" editor-type-id=\"text-editor\">\r\n            <state line=\"0\" column=\"14\" selection-start=\"14\" selection-end=\"14\" vertical-scroll-proportion=\"0.0\">\r\n              <folding />\r\n            </state>\r\n          </provider>\r\n        </entry>\r\n      </file>\r\n    </leaf>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1mGgn6NEliLIeoczOIKaRAKXE5F\" />\r\n  <component name=\"ProjectView\">\r\n    <navigator currentView=\"ProjectPane\" proportions=\"\" version=\"1\" splitterProportion=\"0.5\">\r\n      <flattenPackages />\r\n      <showMembers />\r\n      <showModules />\r\n      <showLibraryContents />\r\n      <hideEmptyPackages />\r\n      <abbreviatePackageNames />\r\n      <autoscrollToSource />\r\n      <autoscrollFromSource />\r\n      <sortByType />\r\n    </navigator>\r\n    <panes>\r\n      <pane id=\"Scope\" />\r\n      <pane id=\"PackagesPane\" />\r\n      <pane id=\"ProjectPane\">\r\n        <subPane>\r\n          <PATH>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"untitled104\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode\" />\r\n            </PATH_ELEMENT>\r\n          </PATH>\r\n          <PATH>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"untitled104\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode\" />\r\n            </PATH_ELEMENT>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"untitled104\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode\" />\r\n            </PATH_ELEMENT>\r\n          </PATH>\r\n          <PATH>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"untitled104\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode\" />\r\n            </PATH_ELEMENT>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"untitled104\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode\" />\r\n            </PATH_ELEMENT>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"src\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode\" />\r\n            </PATH_ELEMENT>\r\n            <PATH_ELEMENT>\r\n              <option name=\"myItemId\" value=\"company\" />\r\n              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode\" />\r\n            </PATH_ELEMENT>\r\n          </PATH>\r\n        </subPane>\r\n      </pane>\r\n    </panes>\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.company.Main\" />\r\n      <module name=\"calculator v2\" />\r\n      <RunnerSettings RunnerId=\"Run\" />\r\n      <ConfigurationWrapper RunnerId=\"Run\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"19986b7f-423d-4f3a-a973-6f40d30c66b1\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1609125509655</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1609125509655</updated>\r\n      <workItem from=\"1609125510818\" duration=\"1017000\" />\r\n      <workItem from=\"1609127541209\" duration=\"18672000\" />\r\n      <workItem from=\"1609223301566\" duration=\"8106000\" />\r\n      <workItem from=\"1609233901172\" duration=\"2222000\" />\r\n      <workItem from=\"1609266294193\" duration=\"1261000\" />\r\n      <workItem from=\"1609267995471\" duration=\"5254000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"commit\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2dc1146769f28af8d37256a441c2964f36c16170)
+++ b/.idea/workspace.xml	(date 1609313599443)
@@ -1,7 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="19986b7f-423d-4f3a-a973-6f40d30c66b1" name="Default Changelist" comment="commit" />
+    <list default="true" id="19986b7f-423d-4f3a-a973-6f40d30c66b1" name="Default Changelist" comment="commit">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/company/Calculator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/company/Calculator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/company/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/company/Main.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -132,7 +136,7 @@
       <workItem from="1609223301566" duration="8106000" />
       <workItem from="1609233901172" duration="2222000" />
       <workItem from="1609266294193" duration="1261000" />
-      <workItem from="1609267995471" duration="5254000" />
+      <workItem from="1609267995471" duration="5726000" />
     </task>
     <servers />
   </component>
